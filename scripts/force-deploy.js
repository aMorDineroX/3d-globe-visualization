const { execSync } = require('child_process');
const path = require('path');
const fs = require('fs');

// Fonction pour ex√©cuter une commande shell et afficher sa sortie
function runCommand(command) {
  console.log(`Ex√©cution de: ${command}`);
  try {
    const output = execSync(command, { stdio: 'inherit' });
    return true;
  } catch (error) {
    console.error(`Erreur lors de l'ex√©cution de la commande: ${error.message}`);
    return false;
  }
}

// Script principal
async function main() {
  console.log("üì¶ D√©ploiement FORC√â sur GitHub Pages (mode urgence)");
  console.log("====================================================");
  console.log("‚ö†Ô∏è Ce script d√©ploie le contenu de ./dist m√™me √† partir de la branche gh-pages");
  
  try {
    // S'assurer que le dossier dist existe
    if (!fs.existsSync(path.join(__dirname, '../dist'))) {
      console.log("‚ùå Le dossier dist n'existe pas. Lancement de la construction...");
      runCommand('npm run build');
      
      if (!fs.existsSync(path.join(__dirname, '../dist'))) {
        console.error("‚ùå √âchec de la construction. V√©rifiez les erreurs ci-dessus.");
        process.exit(1);
      }
    }
    
    console.log("üìã Pr√©paration des fichiers pour GitHub Pages...");
    
    // Cr√©er un r√©pertoire temporaire pour le d√©ploiement
    const deployDir = path.join(__dirname, '../.gh-pages-deploy');
    if (fs.existsSync(deployDir)) {
      // Nettoyage si le r√©pertoire existe d√©j√†
      fs.rmSync(deployDir, { recursive: true, force: true });
    }
    fs.mkdirSync(deployDir, { recursive: true });
    
    // Copier le contenu de dist vers le r√©pertoire de d√©ploiement
    console.log("üì¶ Copie des fichiers de build...");
    
    // Sur Windows, utiliser xcopy
    if (process.platform === 'win32') {
      runCommand(`xcopy .\\dist\\* "${deployDir}\\" /E /Y`);
    } else {
      runCommand(`cp -R ./dist/* "${deployDir}/"`);
    }
    
    // Ajouter un fichier .nojekyll
    fs.writeFileSync(path.join(deployDir, '.nojekyll'), '');
    
    // Initialiser un nouveau repo git dans le r√©pertoire de d√©ploiement
    console.log("üîÑ Initialisation d'un nouveau d√©p√¥t Git pour le d√©ploiement...");
    if (!runCommand(`cd "${deployDir}" && git init`)) {
      console.error("‚ùå √âchec de l'initialisation du d√©p√¥t Git.");
      process.exit(1);
    }
    
    // Ajouter tous les fichiers au nouveau repo
    console.log("‚ûï Ajout des fichiers au d√©p√¥t Git...");
    if (!runCommand(`cd "${deployDir}" && git add .`)) {
      console.error("‚ùå √âchec de l'ajout des fichiers.");
      process.exit(1);
    }
    
    // Configurer l'utilisateur Git si n√©cessaire
    try {
      execSync('git config user.email');
    } catch (error) {
      console.log("‚öôÔ∏è Configuration de l'utilisateur Git pour le d√©ploiement...");
      runCommand('git config --global user.email "github-actions@github.com"');
      runCommand('git config --global user.name "GitHub Actions"');
    }
    
    // Cr√©er un commit
    console.log("üìù Cr√©ation d'un commit de d√©ploiement...");
    if (!runCommand(`cd "${deployDir}" && git commit -m "D√©ploiement sur GitHub Pages (forc√©)"`)) {
      console.error("‚ùå √âchec de la cr√©ation du commit.");
      process.exit(1);
    }
    
    // Obtenir l'URL du d√©p√¥t distant
    let remoteUrl;
    try {
      remoteUrl = execSync('git remote get-url origin').toString().trim();
    } catch (error) {
      console.error("‚ùå Impossible de d√©terminer l'URL du d√©p√¥t distant.");
      process.exit(1);
    }
    
    // Ajouter le d√©p√¥t distant
    console.log("üîÑ Configuration du d√©p√¥t distant...");
    if (!runCommand(`cd "${deployDir}" && git remote add origin ${remoteUrl}`)) {
      console.error("‚ùå √âchec de l'ajout du d√©p√¥t distant.");
      process.exit(1);
    }
    
    // Pousser vers GitHub
    console.log("‚òÅÔ∏è Envoi sur GitHub (force push)...");
    if (!runCommand(`cd "${deployDir}" && git push -f origin master:gh-pages`)) {
      console.error("‚ùå √âchec de l'envoi sur GitHub.");
      process.exit(1);
    }
    
    // Nettoyage
    console.log("üßπ Nettoyage apr√®s d√©ploiement...");
    fs.rmSync(deployDir, { recursive: true, force: true });
    
    console.log("‚úÖ D√©ploiement FORC√â termin√© avec succ√®s!");
    console.log("üåê URL: https://amordinerox.github.io/3d-globe-visualization/");
    console.log("\n‚ö†Ô∏è N'oubliez pas de revenir sur votre branche principale d√®s que possible.");
    console.log("Pour ce faire, ex√©cutez: npm run fix-branch");
    
  } catch (error) {
    console.error("‚ùå Erreur lors du d√©ploiement:", error);
    process.exit(1);
  }
}

// Ex√©cution du script
main();
